name: "Python reusable Workflow"

on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version required"
        required: false
        type: string
        default: "3.12"
      build-tool:
        description: "Choose the build tool: pip, poetry, uv or pipenv"
        required: false
        type: string
        default: "pip"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Initialize stage status
        run: |
          echo "CHECKOUT_STATUS=Skipped" >> $GITHUB_ENV
          echo "PYTHON_SETUP_STATUS=Skipped" >> $GITHUB_ENV
          echo "VALIDATION_STATUS=Skipped" >> $GITHUB_ENV
          echo "CACHE_STATUS=Skipped" >> $GITHUB_ENV
          echo "INSTALL_STATUS=Skipped" >> $GITHUB_ENV
          echo "TEST_STATUS=Skipped" >> $GITHUB_ENV

      - name: checkout repository
        uses: actions/checkout@v3

        
      - name: Mark checkout status
        run: echo "CHECKOUT_STATUS=âœ… Success" >> $GITHUB_ENV


      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ inputs.python-version }}

      - name: Mark Python setup status
        run: echo "PYTHON_SETUP_STATUS=âœ… Success" >> $GITHUB_ENV

      - name: Validate inputs
        run: |
          echo "Validating inputs..."
          case "${{ inputs.build-tool }}" in
            pip|poetry|pipenv|uv) echo "Valid build tool: ${{ inputs.build-tool }}" ;;
            *) echo "Unsupported build tool: ${{ inputs.build-tool }}" && exit 1 ;;
          esac
      - name: Mark validate inputs
        run: echo "VALIDATION_STATUS=âœ… Success" >> $GITHUB_ENV

        

      - name: Set up cache path
        run: |
          echo "Setting up cache files"
          case "${{ inputs.build-tool }}" in
            pip) echo "CACHE_PATH=~/.cache/pip" >> "$GITHUB_ENV" ;;
            poetry) echo "CACHE_PATH=~/.cache/pypoetry" >> "$GITHUB_ENV" ;;
            pipenv) echo "CACHE_PATH=~/.cache/pipenv" >> "$GITHUB_ENV" ;;
            uv) echo "CACHE_PATH=~/.cache/uv" >> "$GITHUB_ENV" ;;
          esac

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-${{ inputs.build-tool }}-${{ hashFiles('**/poetry.lock', '**/Pipfile.lock', '**/requirements.txt') }}

      - name: Mark cashe status
        run: echo "CACHE_STATUS=âœ… Success" >> $GITHUB_ENV

      - name: Install build tool
        run: |
          case "${{ inputs.build-tool }}" in
            poetry)
              curl -sSL https://install.python-poetry.org | python3 -
              echo "$HOME/.local/bin" >> $GITHUB_PATH
              ;;
            pipenv)
              pip install pipenv
              ;;
            uv)
              curl -Ls https://astral.sh/uv/install.sh | bash
              ;;
          esac

      - name: Install Dependencies
        run: |
          if [ "${{ inputs.build-tool }}" == "pip" ]; then
            if [ ! -f requirements.txt ]; then
              echo "No requirements.txt found"
              exit 1
            else
              pip install -r requirements.txt
            fi

          elif [ "${{ inputs.build-tool }}" == "poetry" ]; then
            if [ ! -f pyproject.toml ]; then
              poetry init --name "auto-generated-project" \
                          --dependency "requests" \
                          --dev-dependency "pytest" \
                          --no-interaction
            fi
            poetry install --no-root

          elif [ "${{ inputs.build-tool }}" == "pipenv" ]; then
            if [ ! -f Pipfile ]; then
              echo "No Pipfile found. Creating default with pytest"
              pipenv install --dev pytest
            else
              pipenv install
            fi

          elif [ "${{ inputs.build-tool }}" == "uv" ]; then
            if [ ! -f "requirements.txt" ]; then
              echo " requirements.txt not found"
              exit 1
            fi
            if [ ! -d "env" ] && [ ! -d ".venv" ] && [ ! -d "venv" ]; then
              echo "No virtual environment is set"
              echo "Setting then virtual environemnt"
              uv venv .venv
            fi
            uv pip install -r requirements.txt
          fi
      
      - name: Mark install status
        run: echo "INSTALL_STATUS=âœ… Success" >> $GITHUB_ENV


      - name: Run tests
        run: |
          REPORT_FILE="test-results-${{ inputs.build-tool }}.xml"
          if [ "${{ inputs.build-tool }}" == "poetry" ]; then
            poetry run pytest --junitxml=$REPORT_FILE
          elif [ "${{ inputs.build-tool }}" == "pipenv" ]; then
            pipenv run pytest --junitxml=$REPORT_FILE
          elif [ "${{ inputs.build-tool }}" == "uv" ]; then
            .venv/bin/pytest --junitxml=$REPORT_FILE
          else
            pytest --junitxml=$REPORT_FILE
          fi

      - name: Mark checkout status
        run: echo "TEST_STATUS=âœ… Success" >> $GITHUB_ENV\


      - name: Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-results-{{ matrix.build-tool }}.xml

      - name: Stage Summary Report
        if: always()
        run: |
          echo "### ðŸš¦ Stage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Checkout | $CHECKOUT_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Setup | $PYTHON_SETUP_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Input Validation | $VALIDATION_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Cache | $CACHE_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Install | $INSTALL_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | $TEST_STATUS |" >> $GITHUB_STEP_SUMMARY
